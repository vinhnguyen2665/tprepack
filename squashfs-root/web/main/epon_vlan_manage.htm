<script language="javascript" type="text/javascript">
var DIR_US = "0";
var DIR_DS = "1";
var PKT_DRP = "0";
var PKT_FWD = "1";

var VID_NULL = "0"
var VID_ONE = "1"
var PRI_NULL = "8"

var ETH_PROTO_ALL = 0;
var ETH_PROTO_IP = 0x0800;

var tagModeRules;
var tagModeUsRule;
var tagModeDsOnetagRule;
var tagModeDsTwotagRule;

var VLAN_OP_ASIS                               = 0;
var VLAN_OP_DISCARD                            = 1;      
var VLAN_OP_ADD                                = 2;  
var VLAN_OP_ADD_COPY_DSCP                      = 3;
var VLAN_OP_ADD_COPY_OUTER_PBIT                = 4;
var VLAN_OP_ADD_COPY_INNER_PBIT                = 5;
var VLAN_OP_ADD_2_TAGS                         = 6;
var VLAN_OP_ADD_2_TAGS_COPY_DSCP               = 7;
var VLAN_OP_ADD_2_TAGS_COPY_PBIT               = 8;
var VLAN_OP_REM                                = 9;
var VLAN_OP_REM_2_TAGS                         = 10;
var VLAN_OP_REPLACE                            = 11;
var VLAN_OP_REPLACE_VID                        = 12;
var VLAN_OP_REPLACE_PBIT                       = 13;
var VLAN_OP_REPLACE_INNER_ADD_OUTER            = 14;
var VLAN_OP_REPLACE_INNER_ADD_OUTER_COPY_PBIT  = 15;
var VLAN_OP_REPLACE_INNER_REM_OUTER            = 16;
var VLAN_OP_REPLACE_2TAGS                      = 17;
var VLAN_OP_REPLACE_2TAGS_VID                  = 18;
var VLAN_OP_SWAP                               = 19;

var ENUM_MODE_REMOTE = 0;
var ENUM_MODE_TAG = 1;
var ENUM_MODE_TRANSP = 2;
var ENUM_MODE_STRIP = 3;
var ENUM_MODE_DS_TRANSP = 4;


function FwRuleEntryLocal(direction, igrTagNum, igrOuterVid, igrOuterPri, igrInnerVid, igrInnerPri, ethType, action, vlanOpr, egrOuterVid, egrOuterPri, egrInnerVid, egrInnerPri, isDefault)
{
	//alert('egrInnerVid = ' + egrInnerVid + 'egrInnerPri = ' + egrInnerPri);
	this.direction = direction;
	this.igrTagNum = igrTagNum;
	this.igrOuterVid = igrOuterVid;
	this.igrOuterPri = igrOuterPri;
	this.igrInnerVid = igrInnerVid;
	this.igrInnerPri = igrInnerPri;
	this.ethType = ethType;
	this.action = action;
	this.vlanOpr = vlanOpr;
	this.egrOuterVid = egrOuterVid;
	this.egrOuterPri = egrOuterPri;
	this.egrInnerVid = egrInnerVid;
	this.egrInnerPri = egrInnerPri;
	this.isDefault = isDefault;
}

function FwRuleEntryLocalUsDefault(igrTagNum, igrOuterVid, igrOuterPri, igrInnerVid, igrInnerPri, ethType, action, vlanOpr, egrOuterVid, egrOuterPri, egrInnerVid, egrInnerPri)
{
	return new FwRuleEntryLocal(DIR_US, igrTagNum, igrOuterVid, igrOuterPri, igrInnerVid, igrInnerPri, ethType, action, vlanOpr, egrOuterVid, egrOuterPri, egrInnerVid, egrInnerPri, 1);
}

function FwRuleEntryLocalDsDefault(igrTagNum, igrOuterVid, igrOuterPri, igrInnerVid, igrInnerPri, ethType, action, vlanOpr, egrOuterVid, egrOuterPri, egrInnerVid, egrInnerPri)
{
	return new FwRuleEntryLocal(DIR_DS, igrTagNum, igrOuterVid, igrOuterPri, igrInnerVid, igrInnerPri, ethType, action,vlanOpr, egrOuterVid, egrOuterPri, egrInnerVid, egrInnerPri, 1);
}

/* Add Tag */
function FwRuleEntryLocalUsDefault_UntagAddTag(vid, pri)
{
	return new FwRuleEntryLocalUsDefault(0, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_ADD, VID_NULL, PRI_NULL, vid, pri);
}



/* Remove Tag */
function FwRuleEntryLocalDsDefault_OneTagRemTag()
{
	return new FwRuleEntryLocalDsDefault(1, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_REM, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}

function FwRuleEntryLocalDsDefault_TwoTagRemAllTag()
{
	return new FwRuleEntryLocalDsDefault(2, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_REM_2_TAGS, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}




/* Transparent */
function FwRuleEntryLocalUsDefault_UntagTransparent()
{
	return new FwRuleEntryLocalUsDefault(0, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_ASIS, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}
function FwRuleEntryLocalUsDefault_OnetagTransparent()
{
	return new FwRuleEntryLocalUsDefault(1, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_ASIS, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}
function FwRuleEntryLocalUsDefault_TwotagTransparent()
{
	return new FwRuleEntryLocalUsDefault(2, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_ASIS, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}

function FwRuleEntryLocalDsDefault_UntagTransparent()
{
	return new FwRuleEntryLocalDsDefault(0, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_ASIS, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}
function FwRuleEntryLocalDsDefault_OnetagTransparent()
{
	return new FwRuleEntryLocalDsDefault(1, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_ASIS, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}
function FwRuleEntryLocalDsDefault_TwotagTransparent()
{
	return new FwRuleEntryLocalDsDefault(2, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL, ETH_PROTO_ALL, PKT_FWD, VLAN_OP_ASIS, VID_NULL, PRI_NULL, VID_NULL, PRI_NULL);
}








function FwRuleEntryLocalUsDefault_UntagRule(rules)
{
	var idx = 0, rule = null;
	var retRules = new Array();
	for (idx = 0; idx < rules.length; idx++)
	{
		rule = rules[idx];
		if (rule.direction == DIR_US && rule.igrTagNum == 0 && rule.isDefault)
		{
			retRules[0] = rule;	
		}
		else if (rule.direction == DIR_DS && rule.igrTagNum == 1)
		{
			retRules[1] = rule;
		}
		else if (rule.direction == DIR_DS && rule.igrTagNum == 2)
		{
			retRules[2] = rule;
		}
	}
	
	return retRules;
}



function doClick(obj)
{
	var vlan_mode_val;
	var vlanIdInUpStream_val;
	var vlanIdInUpStream_pri;
	
	vlan_mode_val = $.id("vlan_mode").options[$.id("vlan_mode").selectedIndex].value;
	//alert("vlan_mode_val = " + vlan_mode_val);
	if (vlan_mode_val == 1)
	{
		var pattern = null;
		
		//vlanIdInUpStream_pri = $.id("defaultVlanPri").options[$.id("defaultVlanPri").selectedIndex].value;
		vlanIdInUpStream_pri = 0;
		vlanIdInUpStream_val = $.id("defaultVlanId").value;

		pattern = new RegExp("^[0-9]+$","i");

		if (pattern.exec($.id("defaultVlanId").value)  == null)
		{
			alert("Input Value of VLAN vid is Error!\nVLAN vid must be a number between 1 and 4094")
			$.id("defaultVlanId").value = ""
			return
		}

		if ($.id("defaultVlanId").value < 1 || $.id("defaultVlanId").value > 4094)
		{
			alert("Input Value of VLAN vid is Error!\nVLAN vid must be a number between 1 and 4094")
			$.id("defaultVlanId").value = ""
			return
		}	
	}
	//if(confirm("修改后，请重启设备或者重新插拔光纤，是否确定修改 ?"))
	if(confirm("To take effect, device will re-register. Are you sure to continue?"))
    {
        if (vlan_mode_val == ENUM_MODE_TAG)
        {
            $.act(ACT_SET, EPON_VLAN_MODE, null, null, ["mgmtMode=" + vlan_mode_val, "vid=" + vlanIdInUpStream_val, "priority=" + vlanIdInUpStream_pri]);
        }
        else
        {
            $.act(ACT_SET, EPON_VLAN_MODE, null, null, ["mgmtMode=" + vlan_mode_val]);
        }
        if ($.exe())
        {
            alert("SET VLAN ERROR!");
        }
                    
		$.act(ACT_OP, ACT_OP_OAM_RESTART);
		$.exe(function(err)
		{
			if (!err)
			{
				/* Important! 重新加载页面，这样能够重新初始化JS全局变量，如tagModeUsRule */
				$.loadMain();
			}
		});
	}
}

function getScanResult()
{
	var vlanScanStatus;
	var vlanScanList;
	
	$.auto(function()
	{
		vlanScanStatus = $.act(ACT_GET, PON_VLAN_SCAN, null, null, ["scanStatus"]);		
		$.exe()
		
		vlanScanList = $.act(ACT_GL, VLAN_SCAN_RESULT, null, null, null);
		
		$.exe()
		
		showVlanScanResult(vlanScanStatus.scanStatus, vlanScanList);		
			
		if (vlanScanStatus.scanStatus != 2)
		{	
			return false;	
		}
		
	}, 3000, true);
	
}

function scan(obj)
{
	var ponList = $.act(ACT_GL, PON, null, null, null);
	$.exe()
	
	var regInfo = $.act(ACT_GET, PON_REG_INFO, ponList[0].__stack, null, ["regStatus","regTime", "ctcVersion"]);
	//var ponRTStatus = $.act(ACT_GET, PON_REG_INFO, pon[0].__stack, null, ["regStatus", "regTime","ctcVersion"]);
	$.exe()
	
	
	if (regInfo.regStatus != "5")
	{
		alert("Please wait ONU successfully registered !");
		$.h($.id("vlan_results"), "Please wait ONU successfully registered !")
		return;
	}
	
	var vlanScanStatus = $.act(ACT_GET, PON_VLAN_SCAN, null, null, ["scanStatus"]);		
	$.exe()
	
	if(vlanScanStatus.scanStatus == 2)
	{
		alert("Scanning，please wait...");
		return;
	}		

	$.act(ACT_SET, PON_VLAN_SCAN, null, null, ["scanStatus=2"]);
	$.h($.id("vlan_scanned"), "Scanning...")
	$.exe()
	
	$.timeout(getScanResult, 2000);
}

function showVlanScanResult(status, vlanScanList)
{
	var content = ""
	
	if (status == 0)
	{
		content = ""
		$.id("scanbtn").value = "Start VLAN Scan"
		$.h($.id("vlan_results"), content)
	}
	else if (status == 2 && vlanScanList.length == 0)
	{
		$.id("scanbtn").disabled = true;
		$.id("scanbtn").value = "Scanning..."
		
		content = "Scanning，please wait..."			
		$.h($.id("vlan_results"), content)		
	}
	else if (status == 1 && vlanScanList.length == 0)
	{
		$.id("scanbtn").value = "Restart VLAN Scan"
		$.id("scanbtn").disabled = false;
		
		content = "Scan is over, the information available is not detected, please try several times later."
		$.h($.id("vlan_results"), content)
	}
	else if (vlanScanList.length != 0)
	{
		//content = "<table id=\"innertab\" class=\"bdr tc M\" ><thead><tr><th width=\"30%\">Dial Type</th><th width=\"30%\">VLAN Mode</th><th width=\"20%\">VLAN vid</th><th width=\"20%\">Priority</th></tr></thead><tbody></tbody></table>"
		content = "<table id=\"innertab\" class=\"bdr tc M\" ><thead><tr><th width=\"40%\">Dial Type</th><th width=\"40%\">VLAN Mode</th><th width=\"20%\">VLAN Vid</th></tr></thead><tbody></tbody></table>"
		$.h($.id("vlan_results"), content)
		var tb = document.getElementById("innertab").tBodies[0];
		var type = ""
		var vlanmode = ""
		var vid = ""
		var priority = ""
		for (var i = 0; i < vlanScanList.length; ++i)
		{
			if (vlanScanList[i].type == 1)
				type = "PPPoE"
			else if  (vlanScanList[i].type == 2)
				type = "DHCP"
			else if  (vlanScanList[i].type == 3)
				type = "PPPoE、DHCP"
			else
				type = "Unknown Dial Type"

			if (vlanScanList[i].vid == 0)
			{
				vlanmode = "Transparent Mode"
				vid = "-"
				priority = "-"
			}
			else if (vlanScanList[i].vid > 0 && vlanScanList[i].vid < 4095)
			{
				vlanmode = "VLAN TAG Mode"
				vid = vlanScanList[i].vid
				priority = vlanScanList[i].priority
			}
			else
			{
				vlanmode = "Unknown Mode"
				vid = vlanScanList[i].vid
				priority = vlanScanList[i].priority
			}

			tr = tb.insertRow(-1)
			tc = tr.insertCell(0)
			tc.innerHTML = type
			tc = tr.insertCell(1)
			tc.innerHTML = vlanmode
			tc = tr.insertCell(2)
			tc.innerHTML = vid
			//tc = tr.insertCell(3)
			//tc.innerHTML = priority
		}
		
		if (status == 1)
		{
			$.id("scanbtn").value = "Restart VLAN Scan"
			$.id("scanbtn").disabled = false;
		}
		else if (status == 2)
		{
			$.id("scanbtn").value = "Scanning..."
			$.id("scanbtn").disabled = true;
		}
	}	
}

function port_vlanmode_change()
{
	var rules = $.act(ACT_GET, EPON_VLAN_MODE, null, null, ["vid","priority"]);
	
	if (!$.exe())
	{
		$.id("defaultVlanId").value = rules.vid;
		//$.id("defaultVlanPri").value = rules.priority;
	}
	
	//alert($.id("defaultVlanId").value + "," + $.id("defaultVlanPri").value);
	
	/*标记模式*/
	if ($.id("vlan_mode").value == 1)
	{
		$.id("defaultVlanId").disabled = false;
		//$.id("defaultVlanPri").disabled = false;
		$.removeClass($.id("defaultVlanId_t"), "nv");
	}
	else
	{	
		$.id("defaultVlanId").disabled = true;
		//$.id("defaultVlanPri").disabled = true;
		$.addClass($.id("defaultVlanId_t"), "nv");
	}
}

function init()
{
	
	var fwRule = $.act(ACT_GET, EPON_VLAN_MODE, null, null, ["mgmtMode"]);
	
	if (!$.exe())
	{
		$.id("vlan_mode").value = fwRule.mgmtMode;
	}
	
	port_vlanmode_change();
	
	getScanResult();
}

</script>

<p class="et"><b>VLAN Setting</b></p>
<div class="con1 M">

<p class="bl"></p>
<p class="st T" id="vlan_title_"><b>VLAN Mode</b></p>
<div class="con2">

<p class="L1">This function is used to set the available VLAN mode and VLAN vid. And you can use <span style="color:red; cursor:pointer; text-decoration:underline" onclick="scan(this)">VLAN Scan</span> function to get vlan mode and vlan vid.</p>

<p class="br"></p>

<p><b class="item">VLAN Mode:</b><select id="vlan_mode" style="width:240px" onchange="port_vlanmode_change()" >
		<option value="0">Control By OLT</option>
		<option value="1">VLAN TAG Mode</option>
		<option value="2">Transparent Mode</option>
		<option value="3">Remove DownStream VLAN vid</option>
		<option value="4">DownStream Transparent Mode</option>
	</select> 	
</p>
<p id ="defaultVlanId_t">
<b class="item M" >VLAN Vid :</b><input type="text" class="text" size="14" id="defaultVlanId" maxlength="4" />
[1~4094]&nbsp;&nbsp;
<!--
<b class="M" >VLAN Priority:</b>
<select id="defaultVlanPri">
	<option value="0">0</option>
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
    <option value="4">4</option>
    <option value="5">5</option>
    <option value="6">6</option>
    <option value="7">7</option>
</select>
-->
</p> 

<!--
<p class="br"></p>
<p class="L1">Control By OLT：&nbsp;&nbsp;由运营商远程自动控制。</p>
<p class="L1">VLAN TAG Mode：&nbsp;&nbsp;&nbsp;&nbsp;给上行无VLAN数据加一个VLAN标记，剥离所有下行数据的VLAN。</p>
<p class="L1">Transparent Mode：&nbsp;&nbsp;&nbsp;&nbsp;允许所有数据通过。</p>
<p class="L1">Remove DownStream VLAN vid：上行由远程自动控制，下行数据剥离所有VLAN标记。</p>
-->
<p class="br"></p>
<p class="center">
<input type="button" class="button L" value="Save" style="width:120px" id="save" onclick='doClick(this)'/>
</p>
</div>
</div>

<p class="bl"></p>
<div class="con1 M">
<p class="st T" id="vlan_title_"><b>VLAN Scan</b></p>
<div class="con2">
	<p class="L1">This function is used to detect the available VLAN mode and VLAN vid. Before scanning, please make sure that you have input the valid auth info and ONU is registered.</p>
	<p class="L1">
		<p class="center">
			<span id="vlan_results"></span>
		</p>
	</p>
	<p class="br"></p>	
	

<p class="center" >
	<input type="button" class="button L" style="width:200px" value="Start VLAN Scan" id="scanbtn" onclick="scan(this)" />
</p>	
<p class="bl"></p>
</div>

</div>

<script language="javascript" type="text/javascript">
init();
</script>
	
	
